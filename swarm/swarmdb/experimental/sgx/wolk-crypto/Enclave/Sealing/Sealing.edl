enclave {
    include "sgx_tseal.h"

    trusted {
        public sgx_status_t seal([in, size=plaintext_len]uint8_t* plaintext, size_t plaintext_len, [out, size=sealed_size]sgx_sealed_data_t* sealed_data, size_t sealed_size);

        public sgx_status_t unseal([in, size=sealed_size]sgx_sealed_data_t* sealed_data, size_t sealed_size, [out, size=plaintext_len]uint8_t* plaintext, uint32_t plaintext_len);
        
        public sgx_status_t sgxGetSha256([user_check]uint8_t* src, size_t src_len, [user_check]uint8_t* hash, size_t hash_len);
         
        public sgx_status_t sgxEcc256CreateKeyPair([user_check]sgx_ec256_private_t* p_private, [user_check]sgx_ec256_public_t* p_public);
   
        public sgx_status_t sgxEcdsaSign([user_check]uint8_t* sample_data, size_t sample_data_len, [user_check]sgx_ec256_private_t* p_private, [user_check]sgx_ec256_signature_t* p_signature);
          
    };
    
    untrusted {
        /* define OCALLs here. */
        void ocall_print([in, string]const char* str);
        void ocall_uint8_t_print([in, size = len]uint8_t *arr, size_t len);
        void ocall_uint32_t_print([in, size = len]uint32_t *arr, size_t len);
    };
};
