package pss

import (
	"context"
	"errors"
	"fmt"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/crypto"
	"github.com/ethereum/go-ethereum/log"
	"github.com/ethereum/go-ethereum/p2p"
	"github.com/ethereum/go-ethereum/rpc"
	whisper "github.com/ethereum/go-ethereum/whisper/whisperv5"
	"time"
)

// Convenience wrapper for sending and receiving pss messages when using the pss API
type APIMsg struct {
	Msg        []byte
	Asymmetric bool
	Key        string
}

// for debugging, show nice hex version
func (self *APIMsg) String() string {
	return fmt.Sprintf("APIMsg: asym: %v, key: %s", self.Asymmetric, self.Key)
}

// Pss API services
type API struct {
	*Pss
}

func NewAPI(ps *Pss) *API {
	return &API{Pss: ps}
}

// Creates a new subscription for the caller. Enables external handling of incoming messages.
//
// A new handler is registered in pss for the supplied topic
//
// All incoming messages to the node matching this topic will be encapsulated in the APIMsg struct and sent to the subscriber
func (pssapi *API) Receive(ctx context.Context, topic whisper.TopicType) (*rpc.Subscription, error) {
	notifier, supported := rpc.NotifierFromContext(ctx)
	if !supported {
		return nil, fmt.Errorf("Subscribe not supported")
	}

	psssub := notifier.CreateSubscription()

	handler := func(msg []byte, p *p2p.Peer, asymmetric bool, keyid string) error {
		apimsg := &APIMsg{
			Msg:        msg,
			Asymmetric: asymmetric,
			Key:        keyid,
		}
		if err := notifier.Notify(psssub.ID, apimsg); err != nil {
			log.Warn(fmt.Sprintf("notification on pss sub topic rpc (sub %v) msg %v failed!", psssub.ID, msg))
		}
		return nil
	}
	deregf := pssapi.Register(&topic, handler)
	go func() {
		defer deregf()
		select {
		case err := <-psssub.Err():
			log.Warn(fmt.Sprintf("caught subscription error in pss sub topic %x: %v", topic, err))
		case <-notifier.Closed():
			log.Warn(fmt.Sprintf("rpc sub notifier closed"))
		}
	}()

	return psssub, nil
}

// Sends the message wrapped in APIMsg through pss using symmetric encryption
//
// The method will pass on the error received from pss. It will fail if no public key for the Pss peer has been added
// The addresslength parameter decides how many bytes of the address to reveal it transit. -1 equals showing all. 0 means show none.
//func (pssapi *API) SendAsym(key string, topic whisper.TopicType, msg []byte) error {
//	return pssapi.Pss.SendAsym(key, topic, msg)
//}

// BaseAddr returns the local swarm overlay address of the Pss node
//
// Note that the overlay address is NOT inferable. To really know the node's overlay address it must reveal it itself.
func (pssapi *API) BaseAddr() ([]byte, error) {
	return pssapi.Pss.BaseAddr(), nil
}

// Returns the local public key of the Pss node
//
// Derived from the private key passed to the Pss constructor
func (pssapi *API) GetPublicKey() []byte {
	pubkey := pssapi.PublicKey()
	return crypto.FromECDSAPub(&pubkey)
}

// Set Public key to associate with a particular Pss peer
func (pssapi *API) SetPeerPublicKey(pubkey []byte, topic whisper.TopicType, addr PssAddress) error {
	pssapi.Pss.SetPeerPublicKey(crypto.ToECDSAPub(pubkey), topic, addr)
	return nil
}

// Get address hint for topic and key combination
func (pssapi *API) GetAddress(topic whisper.TopicType, asymmetric bool, key string) (PssAddress, error) {
	if asymmetric {
		return pssapi.Pss.pubKeyPool[key][topic].address, nil
	} else {
		return pssapi.Pss.symKeyPool[key][topic].address, nil
	}
}

// Set Symmetric key for communication with a particular Pss peer
//
// if the addtocache parameter is set to false, pss will add this key to the collection of keys used to decrypt incoming messages.
//
// returns the string id auto generated by whisper. Use this to retrieve the key later with GetSymKey
//func (pssapi *API) SetPeerSymmetricKey(symkey []byte, topic whisper.TopicType, addr PssAddress, expires time.Duration, addtocache bool) (string, error) {
//	return pssapi.Pss.SetSymmetricKey(symkey, topic, addr, expires, addtocache)
//}

// Generate a new symkey for a Pss peer, and send requesting a key in return
// The addresslength parameter decides how many bytes of the address to reveal in transit. -1 equals showing all. 0 means show none.
func (pssapi *API) Handshake(pubkey string, topic whisper.TopicType, to PssAddress, sync bool) ([2]string, error) {
	var err error
	var keypair [2]string
	var hsc chan string
	if sync {
		hsc = pssapi.Pss.alertHandshake(pubkey, "")
	}
	keypair[0], err = pssapi.sendKey(common.FromHex(pubkey), &topic, "", to)
	if err != nil {
		return [2]string{}, err
	}
	if sync {
		ctx, _ := context.WithTimeout(context.Background(), symKeyRequestExpiry)
		select {
		case keypair[1] = <-hsc:
			log.Trace("sync handshake response receive", "key", keypair[1])
		case <-ctx.Done():
			return [2]string{}, errors.New("timeout")
		}
	}
	return keypair, nil
}

// Returns incoming and outgoing symkey pair for a particular Pss peer
func (self *API) MatchSymKey(key string) (string, error) {
	id := self.Pss.symKeyPairIndex[key]
	if id == nil {
		return "", fmt.Errorf("invalid key id '%s'", key)
	}
	return *id, nil
}

// get symkey matching symkeyid in pss symkeypool
func (self *API) GetSymKey(keyid string) ([]byte, error) {
	return self.Pss.w.GetSymKey(keyid)
}

// PssAPITest are temporary API calls for development use only
type APITest struct {
	*Pss
}

func NewAPITest(ps *Pss) *APITest {
	return &APITest{Pss: ps}
}

// get all symkey ids in pss symkeypool
func (self *APITest) GetSymKeys() (ids []string, err error) {
	for id, _ := range self.Pss.symKeyPool {
		ids = append(ids, id)
	}
	return ids, nil
}

// manually set in- and outgoing pair of symkeys
// equals state after dh symkey exchange (handshake)
func (self *APITest) SetSymKeys(recvkey []byte, sendkey []byte, topic whisper.TopicType, addr PssAddress) (keyids [2]string, err error) {
	keyids[0], err = self.w.AddSymKeyDirect(recvkey)
	if err != nil {
		return [2]string{}, err
	}
	keyids[1], err = self.w.AddSymKeyDirect(sendkey)
	if err != nil {
		return [2]string{}, err
	}
	if _, ok := self.Pss.symKeyPool[keyids[0]]; ok == false {
		self.Pss.symKeyPool[keyids[0]] = make(map[whisper.TopicType]*pssPeer)
	}
	self.Pss.symKeyPool[keyids[0]][topic] = &pssPeer{}
	self.Pss.symKeyPool[keyids[0]][topic].address = addr
	self.Pss.symKeyPool[keyids[0]][topic].expires = time.Now().Add(time.Hour)
	self.Pss.symKeyPairIndex[keyids[0]] = &keyids[1]
	self.Pss.symKeyPairIndex[keyids[1]] = &keyids[0]
	self.Pss.symKeyCacheCursor++
	self.Pss.symKeyCache[self.Pss.symKeyCacheCursor%len(self.Pss.symKeyCache)] = &keyids[0]
	return keyids, nil
}
